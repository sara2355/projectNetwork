import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

public class NewServer {
    // قائمة اللاعبين المتصلين
    private static List<NewClinet> connectedPlayers = new ArrayList<>();
    // قائمة اللاعبين في غرفة الانتظار
    private static List<NewClinet> waitingRoom = new ArrayList<>();

private static final int MAX_PLAYERS_PER_ROOM = 4;
// قائمه للغرف 
private static List<List<NewClinet>> gameRooms = new ArrayList<>();

    public static void main(String[] args) throws IOException {
        ServerSocket serverSocket = new ServerSocket(9090);
        System.out.println("Server started...");

        while (true) {
            System.out.println("Waiting for client connection...");
            Socket clientSocket = serverSocket.accept();
            System.out.println("Connected to client");

            NewClinet clientThread = new NewClinet(clientSocket);
            handlePlayerConnection(clientThread);
        }
    }

    // عند اتصال لاعب جديد (Connect)
    public static synchronized void handlePlayerConnection(NewClinet client) {
        connectedPlayers.add(client);
        new Thread(client).start();
        // نرسل رسالة تأكيد اتصال للعميل نفسه
        client.sendMessage("CONNECTED " + client.getUsername());
        // تحديث قائمة اللاعبين لجميع العملاء
        sendConnectedPlayersListToAll();
    }

  public static synchronized void handlePlayRequest(NewClinet client) {
    // البحث عن غرفة بها أقل من 4 لاعبين
    for (List<NewClinet> room : gameRooms) {
        if (room.size() < MAX_PLAYERS_PER_ROOM) {
            room.add(client);
            sendWaitingRoomListToAll(room);
          
            if (room.size() == 2) {
                startCountdownTimer(room);
            }
            return;
        }
    }

    // إذا لم تكن هناك غرف متاحة، يتم إنشاء غرفة جديدة
    List<NewClinet> newRoom = new ArrayList<>();
    newRoom.add(client);
    gameRooms.add(newRoom);
    sendWaitingRoomListToAll(newRoom);
}

 private static void updateWaitingRoomTimer(List<NewClinet> room, int secondsLeft) {
    for (NewClinet player : room) {
        player.sendMessage("TIMER: " + secondsLeft);
    }
}


  //for timer  
private static void startCountdownTimer(List<NewClinet> room) {
    new Thread(() -> {
        try {
            while (room.size()>2){
                Thread.sleep(1000);
            }
            for (int i = 30; i >= 0; i--) {
                updateWaitingRoomTimer(room, i);
                Thread.sleep(1000);
            }

            if (room.size() >= 2) {
                for (NewClinet player : room) {
                    player.sendMessage("START_GAME");
                }
                System.out.println("بدء اللعبة للغرفة بعد 15 ثانية!");
                gameRooms.remove(room); // إزالة الغرفة بعد بدء اللعبة
            }
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }).start();
}



    // إرسال قائمة اللاعبين المتصلين لجميع العملاء
    public static synchronized void sendConnectedPlayersListToAll() {
        StringBuilder sb = new StringBuilder("PLAYERS: ");
        for (NewClinet player : connectedPlayers) {
            sb.append(player.getUsername()).append(",");
        }
        if (sb.length() > 0) {
            sb.setLength(sb.length() - 1);
        }
        String msg = sb.toString();
        for (NewClinet player : connectedPlayers) {
            player.sendMessage(msg);
        }
    }

    // إرسال قائمة غرفة الانتظار لجميع العملاء
private static void sendWaitingRoomListToAll(List<NewClinet> room) {
    StringBuilder sb = new StringBuilder("WAITING ROOM: ");
    for (NewClinet player : room) {
        sb.append(player.getUsername()).append(",");
    }
    if (sb.length() > 0) {
        sb.setLength(sb.length() - 1);
    }
    String msg = sb.toString();
    for (NewClinet player : room) {
        player.sendMessage(msg);
    }
}


    // إزالة اللاعب عند انقطاع الاتصال
  public static synchronized void removePlayer(NewClinet client) {
    connectedPlayers.remove(client);

    // إزالة اللاعب من جميع الغرف
    List<List<NewClinet>> roomsToRemove = new ArrayList<>();
    for (List<NewClinet> room : gameRooms) {
        room.remove(client);
        if (room.isEmpty()) {
            roomsToRemove.add(room); // إذا أصبحت الغرفة فارغة، احذفها لاحقًا
        } else {
            sendWaitingRoomListToAll(room); // تحديث الغرفة المتبقية
        }
    }
    gameRooms.removeAll(roomsToRemove); // حذف الغرف الفارغة
    
    notifyAllPlayers("Player left: " + client.getUsername());
    sendConnectedPlayersListToAll();
}


    // إرسال رسالة نصية للجميع
    public static void notifyAllPlayers(String message) {
        for (NewClinet player : connectedPlayers) {
            player.sendMessage(message);
        }
    }
}
